# Load required libraries
library(shiny)
library(ggplot2)
library(readr)

# Define UI for application
ui <- fluidPage(
  titlePanel("Peptide Quantification Assay"),
  sidebarLayout(
    sidebarPanel(
      fileInput("file", "Upload CSV File"),
      textInput("url", "Enter URL of CSV File"),
      checkboxInput("header", "Header", TRUE),
      actionButton("loadData", "Load Data"),
      numericInput("inputRFU", "Input RFU Value:", value = NULL, min = 0),
      textOutput("estimatedConcentration")  # Output for displaying estimated Concentration
    ),
    mainPanel(
      plotOutput("scatterPlot")
    )
  )
)

# Define server logic
server <- function(input, output) {
  
  data <- reactive({
    req(input$loadData)
    
    if (!is.null(input$file)) {
      inFile <- input$file
      df <- read.csv(inFile$datapath, header = input$header)
    } else if (!is.null(input$url)) {
      df <- read.csv(input$url, header = input$header)
    }
    
    return(df)
  })
  
  output$scatterPlot <- renderPlot({
    req(data())
    
    p <- ggplot(data(), aes(x = Concentration, y = RFU)) +
      geom_point() +
      geom_smooth(method = "lm", se = FALSE) +  # Add regression line
      labs(x = "Peptide Concentration (ug/mL)", y = "RFU",  # Change x-axis label
           title = "Scatter Plot: Peptide Concentration vs RFU")
    
    # Calculate R-squared value
    fit <- lm(RFU ~ Concentration, data = data())
    rSquared <- summary(fit)$r.squared
    
    # Display R-squared value on the plot
    p <- p + annotate("text", x = Inf, y = -Inf, hjust = 1, vjust = 0,
                      label = paste("R-squared =", round(rSquared, 3)))
    
    return(p)
  })
  
  # Output R-squared value
  output$rSquaredText <- renderText({
    req(data())
    
    # Calculate R-squared value
    fit <- lm(RFU ~ Concentration, data = data())
    rSquared <- summary(fit)$r.squared
    
    return(paste("R-squared =", round(rSquared, 3)))
  })
  
  # Estimate Concentration based on input RFU value
  output$estimatedConcentration <- renderText({
    req(data(), input$inputRFU)
    
    # Fit linear regression model
    fit <- lm(Concentration ~ RFU, data = data())
    
    # Estimate Concentration
    estimated_concentration <- predict(fit, newdata = data.frame(RFU = input$inputRFU))
    
    return(paste("Estimated Concentration (ug/mL):", round(estimated_concentration, 2)))
  })
}

# Run the application
shinyApp(ui = ui, server = server)
